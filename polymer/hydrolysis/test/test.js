var assert=require("chai").assert;var path=require("path");suite("Loader",function(){var e=require("../lib/loader/file-loader.js");var t;beforeEach(function(){t=new e});test("api",function(){assert.ok(t.addResolver);assert.ok(t.request);assert.ok(t.requests)});test("request returns a promise",function(){if(!global.Promise){return}var e=t.request("/");assert.instanceOf(e,Promise)});test("request promises are deduplicated",function(){var e=t.request("/");var s=t.request("/");assert.equal(e,s);assert.equal(Object.keys(t.requests).length,1)});test("Null Resolver",function(e){t.request("/").then(function(){throw"should not get here"},function(t){assert.equal(t,"no resolver found");e()})});suite("Filesystem Resolver",function(){var e=require("../lib/loader/fs-resolver.js");test("fs api",function(){var t=new e({});assert.ok(t.accept)});test("absolute url",function(s){var r=new e({root:path.join(__dirname,"..")});t.addResolver(r);t.request("/test/static/xhr-text.txt").then(function(e){assert.equal(e.trim(),"Hello!")}).then(s,s)});test("host",function(s){var r=new e({host:"www.example.com",root:path.join(__dirname,"..")});t.addResolver(r);t.request("http://www.example.com/test/static/xhr-text.txt").then(function(e){assert.equal(e.trim(),"Hello!")}).then(s,s)});test("basepath",function(s){var r=new e({host:"www.example.com",basePath:"/components"});t.addResolver(r);t.request("http://www.example.com/components/test/static/xhr-text.txt").then(function(e){assert.equal(e.trim(),"Hello!")}).then(s,s)});test("root",function(s){var r=new e({host:"www.example.com",basePath:"/components",root:"test/static/"});t.addResolver(r);t.request("http://www.example.com/components/xhr-text.txt").then(function(e){assert.equal(e.trim(),"Hello!")}).then(s,s)})});suite("Noop Resolver",function(){var e=require("../lib/loader/noop-resolver.js");test("loader api",function(){var t=new e;assert.ok(t.accept)});test("accepts a string",function(){var t=new e("foo");var s=t.accept("foo",{resolve:function(){}});assert.isTrue(s)});test("accepts a regex",function(){var t=new e(/./);var s=t.accept("foo",{resolve:function(){}});assert.isTrue(s)});test("returns empty string for accepted urls",function(s){var r=new e(/./);t.addResolver(r);t.request("anything").then(function(e){assert.equal("",e)}).then(s,s)})})});